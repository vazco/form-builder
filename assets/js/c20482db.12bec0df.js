"use strict";(self.webpackChunkforminer=self.webpackChunkforminer||[]).push([[934],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>u});var a=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=a.createContext({}),p=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},d=function(e){var n=p(e.components);return a.createElement(s.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},c=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),c=p(t),u=o,h=c["".concat(s,".").concat(u)]||c[u]||m[u]||r;return t?a.createElement(h,i(i({ref:n},d),{},{components:t})):a.createElement(h,i({ref:n},d))}));function u(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=t.length,i=new Array(r);i[0]=c;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var p=2;p<r;p++)i[p]=t[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}c.displayName="MDXCreateElement"},9259:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>m,frontMatter:()=>r,metadata:()=>l,toc:()=>p});var a=t(7462),o=(t(7294),t(3905));const r={description:"Deep dive into integration"},i="Integration deep dive",l={unversionedId:"integration",id:"version-1.0.0/integration",title:"Integration deep dive",description:"Deep dive into integration",source:"@site/versioned_docs/version-1.0.0/integration.mdx",sourceDirName:".",slug:"/integration",permalink:"/docs/1.0.0/integration",draft:!1,tags:[],version:"1.0.0",frontMatter:{description:"Deep dive into integration"},sidebar:"docs",previous:{title:"Translations (i18n)",permalink:"/docs/1.0.0/translations"},next:{title:"Troubleshooting",permalink:"/docs/1.0.0/troubleshooting"}},s={},p=[{value:"<code>node</code> and <code>npm</code> version",id:"node-and-npm-version",level:2},{value:"Create a new project",id:"create-a-new-project",level:2},{value:"<code>react</code> and <code>react-dom</code> version",id:"react-and-react-dom-version",level:2},{value:"Install required dependencies",id:"install-required-dependencies",level:2},{value:"Add Forminer directory",id:"add-forminer-directory",level:2},{value:"Create Forminer&#39;s helpers",id:"create-forminers-helpers",level:2},{value:"Add containers",id:"add-containers",level:3},{value:"Add translations",id:"add-translations",level:3},{value:"Integrate Forminer with the application",id:"integrate-forminer-with-the-application",level:2},{value:"Add uniforms theme",id:"add-uniforms-theme",level:3},{value:"Create example component",id:"create-example-component",level:3},{value:"Update <code>App.tsx</code> code",id:"update-apptsx-code",level:3},{value:"Run the application",id:"run-the-application",level:3},{value:"Add styles",id:"add-styles",level:3},{value:"Optional",id:"optional",level:2},{value:"React project version downgrade",id:"react-project-version-downgrade",level:3},{value:"Change the packages&#39; versions in the <code>package.json</code>",id:"change-the-packages-versions-in-the-packagejson",level:4},{value:"Remove <code>package-lock.json</code> file and <code>node_modules</code> directory",id:"remove-package-lockjson-file-and-node_modules-directory",level:4},{value:"Install dependencies",id:"install-dependencies",level:4},{value:"Check your <code>index.tsx</code> file",id:"check-your-indextsx-file",level:4},{value:"Troubleshooting",id:"troubleshooting",level:3}],d={toc:p};function m(e){let{components:n,...r}=e;return(0,o.kt)("wrapper",(0,a.Z)({},d,r,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"integration-deep-dive"},"Integration deep dive"),(0,o.kt)("p",null,"In this section, we will walk through the Forminer integration process on the ",(0,o.kt)("a",{parentName:"p",href:"https://create-react-app.dev/"},"CRA")," (create-react-app) example."),(0,o.kt)("h2",{id:"node-and-npm-version"},(0,o.kt)("inlineCode",{parentName:"h2"},"node")," and ",(0,o.kt)("inlineCode",{parentName:"h2"},"npm")," version"),(0,o.kt)("p",null,"Ensure you have the right versions of node and npm. Look at ",(0,o.kt)("a",{parentName:"p",href:"/docs/1.0.0/technical-requirements"},"Technical requirements (versions)"),"."),(0,o.kt)("h2",{id:"create-a-new-project"},"Create a new project"),(0,o.kt)("p",null,"Create a new project with a typescript template"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"$ npx create-react-app [project-name] --template typescript\n")),(0,o.kt)("h2",{id:"react-and-react-dom-version"},(0,o.kt)("inlineCode",{parentName:"h2"},"react")," and ",(0,o.kt)("inlineCode",{parentName:"h2"},"react-dom")," version"),(0,o.kt)("p",null,"Ensure you have the right versions of ",(0,o.kt)("inlineCode",{parentName:"p"},"react")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"react-dom"),". Look at ",(0,o.kt)("a",{parentName:"p",href:"/docs/1.0.0/technical-requirements"},"Technical requirements (versions)"),"."),(0,o.kt)("p",null,"If your ",(0,o.kt)("inlineCode",{parentName:"p"},"react")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"react-dom")," versions aren't correct you have to downgrade them. To do so follow the steps described in ",(0,o.kt)("a",{parentName:"p",href:"#react-project-version-downgrade"},"React project version downgrade")," section."),(0,o.kt)("h2",{id:"install-required-dependencies"},"Install required dependencies"),(0,o.kt)("p",null,"Install the dependencies as described on the ",(0,o.kt)("a",{parentName:"p",href:"/docs/1.0.0/installation#install-required-dependencies"},"Installation")," page."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Watch out!"),"\nIf you're using ",(0,o.kt)("inlineCode",{parentName:"p"},"npm")," at a version higher than ",(0,o.kt)("inlineCode",{parentName:"p"},"16.14.17")," (not recommended) apart from ",(0,o.kt)("inlineCode",{parentName:"p"},"--save-exact")," flag you will also have to add ",(0,o.kt)("inlineCode",{parentName:"p"},"--legacy-peer-deps"),". The command will look as follows:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"npm i --save-exact --legacy-peer-deps ajv@7.1.1 ajv-errors@2.0.0 ...\n")),(0,o.kt)("h2",{id:"add-forminer-directory"},"Add Forminer directory"),(0,o.kt)("p",null,"Copy ",(0,o.kt)("inlineCode",{parentName:"p"},"Forminer")," directory and paste it to the ",(0,o.kt)("inlineCode",{parentName:"p"},"[project-name]/src")),(0,o.kt)("p",null,(0,o.kt)("img",{src:t(1724).Z,width:"455",height:"397"})),(0,o.kt)("h2",{id:"create-forminers-helpers"},"Create Forminer's helpers"),(0,o.kt)("p",null,"As your ",(0,o.kt)("inlineCode",{parentName:"p"},"Forminer")," folder is already present in the ",(0,o.kt)("inlineCode",{parentName:"p"},"src")," directory, now it's time to add ",(0,o.kt)("inlineCode",{parentName:"p"},"Containers")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"translations"),"."),(0,o.kt)("h3",{id:"add-containers"},"Add containers"),(0,o.kt)("p",null,"Create ",(0,o.kt)("inlineCode",{parentName:"p"},"Containers.tsx")," file in ",(0,o.kt)("inlineCode",{parentName:"p"},"src/components/Containers")),(0,o.kt)("p",null,(0,o.kt)("img",{src:t(5737).Z,width:"456",height:"332"})),(0,o.kt)("p",null,"Example code for ",(0,o.kt)("inlineCode",{parentName:"p"},"Containers.tsx")," can be copied and pasted as below."),(0,o.kt)("details",null,(0,o.kt)("summary",null,"See the code"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"import React, { CSSProperties, Fragment } from 'react';\nimport classNames from 'classnames';\n\nimport { Field as FieldType } from '../../Forminer/const/schemas/field';\nimport { DragSeparator } from '../../Forminer/components/DragSeparator';\nimport { render as renderLive } from '../../Forminer/components/Form';\nimport { render as renderEdit } from '../../Forminer/components/FormEdit';\nimport { LayoutPlaceholder } from '../../Forminer/components/LayoutPlaceholder';\nimport { NS } from '../../Forminer/const/namespace';\nimport { LayoutNode } from '../../Forminer/const/schemas/layout';\nimport { View } from '../../Forminer/const/schemas/view';\nimport { Translations } from '../../Forminer/const/types';\nimport { ComponentDefinitions } from '../../Forminer';\nimport { ContainerDefinitions } from '../../Forminer/lib/containerDefinitions';\nimport isLayoutNodeField from '../../Forminer/lib/isLayoutNodeField';\nimport { WidgetDefinitions } from '../../Forminer/lib/widgetDefinitions';\n\ntype ListProps = {\n  children: LayoutNode[];\n  components: ComponentDefinitions;\n  containers: ContainerDefinitions;\n  depth: number;\n  droppableId: string;\n  isDragging: boolean;\n  isRoot: boolean;\n  nestedDroppableBase: string;\n  path: string;\n  schema: FieldType[];\n  type: string;\n  translations: Translations;\n  variant: 'horizontal' | 'vertical';\n  views: View[];\n  widgets: WidgetDefinitions;\n};\n\ntype FrameProps = {\n  children: LayoutNode[];\n  components: ComponentDefinitions;\n  containers: ContainerDefinitions;\n  depth: number;\n  droppableId: string;\n  isDragging: boolean;\n  isRoot: boolean;\n  nestedDroppableBase: string;\n  path: string;\n  schema: FieldType[];\n  style: CSSProperties;\n  translations: Translations;\n  views: View[];\n  widgets: WidgetDefinitions;\n};\n\nconst containers: ContainerDefinitions = {\n  List: {\n    componentEdit: function List({\n      children,\n      components,\n      containers,\n      depth,\n      droppableId,\n      isDragging,\n      isRoot,\n      nestedDroppableBase,\n      path,\n      schema,\n      type,\n      translations,\n      variant,\n      views,\n      widgets,\n    }: ListProps) {\n      const containerType = variant + type;\n      return (\n        <div\n          className={classNames(\n            `${NS}-${containerType}`,\n            `${NS}-${containerType}--edit`,\n            {\n              [`${NS}-full-height`]: isRoot && children.length === 0,\n            },\n          )}\n        >\n          {children.length === 0 && (\n            <LayoutPlaceholder\n              droppableId={droppableId}\n              fitAvailable={isRoot}\n              isDragging={isDragging}\n              type={containerType}\n              translations={translations}\n            />\n          )}\n\n          {children.length > 0 && (\n            <div\n              className={classNames(\n                `${NS}-${containerType}`,\n                `${NS}-${containerType}--edit`,\n              )}\n            >\n              {children.map((layout, index) => (\n                <div\n                  className={classNames(\n                    `${NS}-dnd-draggable`,\n                    `${NS}-dnd-draggable-${containerType}`,\n                  )}\n                  key={layout.layoutId}\n                >\n                  <>\n                    {!isDragging && (\n                      <DragSeparator\n                        droppableId={`${nestedDroppableBase}${index}`}\n                        type={containerType}\n                      />\n                    )}\n                    {renderEdit({\n                      components,\n                      depth: depth + 1,\n                      layout,\n                      path: `${path}.children.${index}`,\n                      schema,\n                      translations,\n                      views,\n                      widgets,\n                      containers,\n                    })}\n                  </>\n                </div>\n              ))}\n\n              {!isDragging && (\n                <DragSeparator\n                  droppableId={`${nestedDroppableBase}${children.length}`}\n                  isRoot={isRoot}\n                  isLast\n                  type={containerType}\n                />\n              )}\n            </div>\n          )}\n        </div>\n      );\n    },\n    componentLive: function List({\n      children,\n      components,\n      containers,\n      depth,\n      path,\n      schema,\n      type,\n      variant,\n      views,\n      widgets,\n    }: ListProps) {\n      const containerType = variant + type;\n      return (\n        <div className={`${NS}-${containerType}`}>\n          {children.map((layout, index) => {\n            const id = isLayoutNodeField(layout)\n              ? `${layout.viewId}${index}${depth}`\n              : `${index}${depth}`;\n\n            return (\n              <Fragment key={id}>\n                {renderLive({\n                  components,\n                  containers,\n                  depth: depth + 1,\n                  layout,\n                  path: `${path}.children.${index}`,\n                  schema,\n                  views,\n                  widgets,\n                })}\n              </Fragment>\n            );\n          })}\n        </div>\n      );\n    },\n    configSchema: {\n      type: 'object',\n      properties: {\n        variant: { type: 'string', enum: ['horizontal', 'vertical'] },\n      },\n      required: ['variant'],\n    },\n  },\n  Frame: {\n    componentEdit: function Frame({\n      children,\n      components,\n      containers,\n      depth,\n      droppableId,\n      isDragging,\n      isRoot,\n      nestedDroppableBase,\n      path,\n      schema,\n      style,\n      translations,\n      views,\n      widgets,\n    }: FrameProps) {\n      const containerType = 'Frame';\n      return (\n        <div\n          className={classNames(\n            `${NS}-${containerType}`,\n            `${NS}-${containerType}--edit`,\n            {\n              [`${NS}-full-height`]: isRoot && children.length === 0,\n            },\n          )}\n        >\n          <div style={{ border: `${style}` }}>\n            {children.length === 0 && (\n              <LayoutPlaceholder\n                droppableId={droppableId}\n                fitAvailable={isRoot}\n                isDragging={isDragging}\n                type={containerType}\n                translations={translations}\n              />\n            )}\n\n            {children.length > 0 && (\n              <div\n                className={classNames(\n                  `${NS}-${containerType}`,\n                  `${NS}-${containerType}--edit`,\n                )}\n              >\n                <div\n                  className={classNames(\n                    `${NS}-dnd-draggable`,\n                    `${NS}-dnd-draggable-${containerType}`,\n                  )}\n                  key={children[0].layoutId}\n                >\n                  {!isDragging && (\n                    <DragSeparator\n                      droppableId={`${nestedDroppableBase}0`}\n                      type={containerType}\n                    />\n                  )}\n                  {renderEdit({\n                    components,\n                    depth: depth + 1,\n                    layout: children[0],\n                    path: `${path}.children.0`,\n                    schema,\n                    translations,\n                    views,\n                    widgets,\n                    containers,\n                  })}\n                </div>\n\n                {!isDragging && (\n                  <DragSeparator\n                    droppableId={`${nestedDroppableBase}0`}\n                    isRoot={isRoot}\n                    isLast\n                    type={containerType}\n                  />\n                )}\n              </div>\n            )}\n          </div>\n        </div>\n      );\n    },\n    componentLive: function Frame({\n      children,\n      components,\n      containers,\n      depth,\n      path,\n      schema,\n      style,\n      views,\n      widgets,\n    }: FrameProps) {\n      return children.length > 0 ? (\n        <div className={`${NS}-field-container`}>\n          <div style={{ border: `${style}` }}>\n            <Fragment>\n              {renderLive({\n                components,\n                containers,\n                depth: depth + 1,\n                layout: children[0],\n                path: `${path}.children.0`,\n                schema,\n                views,\n                widgets,\n              })}\n            </Fragment>\n          </div>\n        </div>\n      ) : null;\n    },\n    configSchema: {\n      type: 'object',\n      properties: {\n        style: { type: 'string' },\n      },\n    },\n  },\n};\n\nexport default containers;\n"))),(0,o.kt)("h3",{id:"add-translations"},"Add translations"),(0,o.kt)("p",null,"Create ",(0,o.kt)("inlineCode",{parentName:"p"},"translations.tsx")," file in ",(0,o.kt)("inlineCode",{parentName:"p"},"src/lib"),"."),(0,o.kt)("p",null,(0,o.kt)("img",{src:t(7590).Z,width:"457",height:"374"})),(0,o.kt)("p",null,"Example code for ",(0,o.kt)("inlineCode",{parentName:"p"},"translations.tsx")," can be copied and pasted as below."),(0,o.kt)("details",null,(0,o.kt)("summary",null,"See the code"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"import React from 'react';\n\nimport { NS } from '../Forminer/const/namespace';\nimport { Translations } from '../Forminer/const/types';\n\nconst translations: Translations = {\n  AddComponents: 'Add components',\n  AddCondition: 'Add condition',\n  AddCustomProperty: 'Add custom property',\n  AddCustomStyle: 'Add custom style',\n  AddInitialExpression: 'Add initial expression',\n  AddLevel: 'Add level',\n  AddPredefinedValue: 'Add predefined value',\n  AddToSection: 'Add to section',\n  Advanced: 'Advanced',\n  Basic: 'Basic',\n  BoolField: 'Bool field',\n  ComponentLabel: 'Component',\n  ComponentTooltip: 'Select the component to be used in the form',\n  CreateNewCustomComponentTooltip: 'Create new custom component',\n  CustomComponents: 'Custom components',\n  CustomErrorMessages: 'Custom error messages',\n  CustomErrorMessageConstLabel: 'Const',\n  CustomErrorMessageDefaultLabel: 'Default',\n  CustomErrorMessageEnumLabel: 'Predefined values error',\n  CustomErrorMessageFormatLabel: 'Format',\n  CustomErrorMessageMaximumLabel: 'Maximum',\n  CustomErrorMessageMaxLengthLabel: 'Max length',\n  CustomErrorMessageMinimumLabel: 'Minimum',\n  CustomErrorMessageMinLengthLabel: 'Min length',\n  CustomErrorMessageMultipleOfLabel: 'Multiple of',\n  CustomErrorMessagePatternLabel: 'Pattern',\n  CustomErrorMessageRequiredLabel: 'Required',\n  CustomProperties: 'Custom properties',\n  CustomStyles: 'Custom styles',\n  Cancel: 'Cancel',\n  Confirm: 'Confirm',\n  ContainerName(type, variant) {\n    return variant ? `${type} ${variant}` : type;\n  },\n  DateField: 'Date field',\n  DefaultValueLabel: 'Default value',\n  DeleteAllPredefinedValues: 'Delete all predefined values',\n  DisplayIf: 'Display if',\n  DisplayIfTitle(name: string) {\n    return (\n      <>\n        Display <span className={`${NS}-display-if-title-field`}>{name}</span>{' '}\n        if\n      </>\n    );\n  },\n  DisplayIfTooltip:\n    'Define the conditions when the given field should be displayed',\n  Dropdown: 'Dropdown',\n  DropFormComponent: 'Drop a form component here',\n  DuplicateField: 'Duplicate field',\n  DuplicateFieldTooltip: 'Duplicate field',\n  EditComponent: 'Edit component',\n  EditField: 'Edit field',\n  EditFieldTooltip: 'Edit field',\n  EditItem: 'Edit item',\n  EditLayoutComponent: 'Edit layout component',\n  EditPageName: 'Edit page name',\n  EditSection: 'Edit section',\n  ErrorDefinitionNotFound: 'Definition not found: \"AutoForm\".',\n  ErrorFieldNotFound(fieldId) {\n    return `Field not found: \"${fieldId}\".`;\n  },\n  ErrorViewNotFound(viewId) {\n    return `View not found: \"${viewId}\".`;\n  },\n  ExistingFields: 'Existing fields',\n  Field: 'field',\n  Fields: 'Fields',\n  Frame: 'Frame',\n  FormatLabel: 'Format',\n  FormatTooltip: 'Select format of value of the field',\n  Horizontal: 'Horizontal',\n  Is: 'is',\n  LabelLabel: 'Label',\n  LayoutComponents: 'Layout components',\n  LayoutTitle(layoutNodeKind) {\n    return `${layoutNodeKind}`;\n  },\n  ListHorizontal: 'Horizontal section',\n  ListVertical: 'Vertical section',\n  LiteralFalse: 'False',\n  LiteralTrue: 'True',\n  MaximumLabel: 'Maximum',\n  MaximumTooltip: 'Define maximum value of the field',\n  MaxLengthLabel: 'Max length',\n  MaxLengthTooltip: 'Define maximum number of characters in a field',\n  MinimumLabel: 'Minimum',\n  MinimumTooltip: 'Define minimum value of the field',\n  MinLengthLabel: 'Min length',\n  MinLengthTooltip: 'Define minimum number of characters in a field',\n  MultipleOfLabel: 'Multiple of',\n  MultipleOfTooltip:\n    'The field value should be a multiple of a value defined in this field',\n  NameInSchemaLabel: 'Name in schema',\n  ModelErrorsMessage: 'Your model contains errors',\n  NextPage: 'Next Page',\n  NumberField: 'Number field',\n  OfTheFollowingAreTrue: 'of the following are true',\n  OperatorAND: 'Every',\n  OperatorBooleanLiteral: 'Arbitrary boolean',\n  OperatorEQ: 'Equal to',\n  OperatorGTE: 'Greater than or equal to',\n  OperatorGT: 'Greater than',\n  OperatorLengthOf: 'Length of',\n  OperatorLTE: 'Less than or equal to',\n  OperatorLT: 'Less than',\n  OperatorNAND: 'Not every',\n  OperatorNOR: 'None',\n  OperatorNotEQ: 'Not equal to',\n  OperatorNumberLiteral: 'Arbitrary number',\n  OperatorOR: 'Some',\n  OperatorStringLiteral: 'Arbitrary string',\n  OperatorValueOf: 'Value of',\n  OperatorXOR: 'Only one',\n  PageNameLabel: 'Name',\n  PagesLongForm: (\n    <>\n      <div style={{ fontWeight: 'bold' }}>\n        That looks like quite a long form!\n      </div>\n      <br />\n      <div>\n        Consider spreading your fields into pages to make your form more\n        accessible.\n      </div>\n    </>\n  ),\n  PatternLabel: 'Pattern',\n  PatternTooltip: 'Define regular expressions pattern',\n  PlaceholderLabel: 'Placeholder',\n  PlaceholderMax: 'max',\n  PlaceholderMin: 'min',\n  PreDefinedValues: 'Pre-defined values',\n  PropertiesTooltip:\n    'Add props which will be implemented in the given Field.JSON format',\n  RadioField: 'Radio field',\n  Redo: 'Redo',\n  RemoveComponent: 'Remove component',\n  RemoveField: 'Remove field',\n  RemoveFieldTooltip: 'Remove field',\n  RemoveItem: 'Remove item',\n  RemovePage: 'Remove Page',\n  RemovePageConfirmation(pageNumber) {\n    return `Are you sure you want to remove entire Page ${pageNumber}? Your fields might be lost.`;\n  },\n  RequiredLabel: 'Required',\n  RequiredTrueLabel: 'Must be true',\n  Reset: 'Reset',\n  SearchPlaceholder: 'Search for components',\n  StyleTooltip:\n    'Define CSS styles to be used in rendered container of the field.JSON format',\n  Submit: 'Submit',\n  Templates: 'Templates',\n  TextField: 'Text field',\n  Type: 'Type',\n  TypeLabel: 'Type',\n  TypeTooltip: 'Pick what kind of data will be stored in this field',\n  Undo: 'Undo',\n  ValueRestrictions: 'Value restrictions',\n  Vertical: 'Vertical',\n  VisualEditor: 'Visual Editor',\n};\n\nexport default translations;\n"))),(0,o.kt)("h2",{id:"integrate-forminer-with-the-application"},"Integrate Forminer with the application"),(0,o.kt)("h3",{id:"add-uniforms-theme"},"Add ",(0,o.kt)("a",{parentName:"h3",href:"https://uniforms.tools/"},"uniforms")," theme"),(0,o.kt)("p",null,"At this point, you will need one of the uniforms themes. You can check the list of themes ",(0,o.kt)("a",{parentName:"p",href:"https://uniforms.tools/docs/installation/"},"here"),".\nYou can install any theme, but remember to install it at ",(0,o.kt)("inlineCode",{parentName:"p"},"3.4.0")," version."),(0,o.kt)("p",null,"For the purpose of this installation example, we will proceed with ",(0,o.kt)("inlineCode",{parentName:"p"},"uniforms-material")," theme. To do it run the command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"npm i --save-exact uniforms-material@3.4.0\n")),(0,o.kt)("p",null,"In the example, the Material UI components will also be used so let's install it too."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"npm i --save-exact @material-ui/core@4.11.3\n")),(0,o.kt)("h3",{id:"create-example-component"},"Create example component"),(0,o.kt)("p",null,"Create ",(0,o.kt)("inlineCode",{parentName:"p"},"ForminerExample.tsx")," file in ",(0,o.kt)("inlineCode",{parentName:"p"},"src/components/ForminerExample"),"."),(0,o.kt)("p",null,(0,o.kt)("img",{src:t(2131).Z,width:"456",height:"377"})),(0,o.kt)("p",null,"Example code for ",(0,o.kt)("inlineCode",{parentName:"p"},"ForminerExample.tsx")," can be copied and pasted as below."),(0,o.kt)("details",null,(0,o.kt)("summary",null,"See the code"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"import React, { useEffect, ReactNode, ReactElement } from 'react';\nimport Container from '@material-ui/core/Container';\nimport List from '@material-ui/core/List';\nimport Paper from '@material-ui/core/Paper';\nimport * as theme from 'uniforms-material';\n\nimport {\n  Forminer,\n  Provider,\n  createDefaultComponents,\n  useForminer,\n  LayoutNodeKind,\n  Form,\n} from '../../Forminer';\nimport containers from '../Containers/Containers';\nimport translations from '../../lib/translations';\n\nconst defaultForm = {\n  model: {\n    layouts: [\n      {\n        name: 'Page 1',\n        layout: {\n          kind: LayoutNodeKind.Container as const,\n          children: [],\n          type: 'List',\n          config: { variant: 'vertical' },\n          layoutId: '1',\n        },\n      },\n    ],\n    schema: [],\n    views: [],\n  },\n};\n\ntype WrapProps = {\n  children: ReactNode;\n};\n\nconst Wrap = ({ children }: WrapProps): ReactElement => (\n  <Container maxWidth={false}>\n    <Paper elevation={3}>{children}</Paper>\n  </Container>\n);\n\nconst widgets = {};\nconst components = createDefaultComponents(theme);\n\nexport const ForminerExample = (): ReactElement => {\n  const { dispatch, state } = useForminer(defaultForm);\n\n  useEffect(() => {\n    // do whatever you want with new model\n    console.log(state.model.present);\n  }, [state.model.present]);\n\n  return (\n    <>\n      <Wrap>\n        <Provider dispatch={dispatch} state={state}>\n          <Forminer\n            components={components}\n            containers={containers}\n            translations={translations}\n            widgets={widgets}\n          />\n        </Provider>\n      </Wrap>\n      <Wrap>\n        <Form\n          components={components}\n          containers={containers}\n          definition={state.model.present}\n          widgets={widgets}\n          translations={translations}\n        />\n      </Wrap>\n      <Wrap>\n        <pre>{JSON.stringify(state.model.present, null, 4)}</pre>\n      </Wrap>\n    </>\n  );\n};\n\nexport default ForminerExample;\n"))),(0,o.kt)("h3",{id:"update-apptsx-code"},"Update ",(0,o.kt)("inlineCode",{parentName:"h3"},"App.tsx")," code"),(0,o.kt)("p",null,"Go to ",(0,o.kt)("inlineCode",{parentName:"p"},"src/App.tsx")," file and paste the code as follows."),(0,o.kt)("details",null,(0,o.kt)("summary",null,"See the code"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"import React, { ReactElement } from 'react';\nimport ForminerExample from './components/ForminerExample/ForminerExample';\n\nconst App = (): ReactElement => {\n  return <ForminerExample />;\n};\n\nexport default App;\n"))),(0,o.kt)("h3",{id:"run-the-application"},"Run the application"),(0,o.kt)("p",null,"Use command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"npm start\n")),(0,o.kt)("p",null,"Then, verify your application works as expected. You should see the view presented below:"),(0,o.kt)("p",null,(0,o.kt)("img",{src:t(9333).Z,width:"994",height:"992"})),(0,o.kt)("p",null,"If you will encounter problems running the app at this point please look at the ",(0,o.kt)("a",{parentName:"p",href:"#troubleshooting"},"troubleshooting section"),"."),(0,o.kt)("h3",{id:"add-styles"},"Add styles"),(0,o.kt)("p",null,"The last part of the installation process is to add the required styles to make FB look the expected way."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Install ",(0,o.kt)("a",{parentName:"li",href:"https://www.npmjs.com/package/sass"},"Sass"),". Use the following command:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"npm i sass\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Rename ",(0,o.kt)("inlineCode",{parentName:"li"},"src/index.css")," file to ",(0,o.kt)("inlineCode",{parentName:"li"},"index.scss")),(0,o.kt)("li",{parentName:"ul"},"Update ",(0,o.kt)("inlineCode",{parentName:"li"},"index.scss")," file content to be:")),(0,o.kt)("details",null,(0,o.kt)("summary",null,"See the code"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sass"},"@import './Forminer/variables.scss';\n@import './Forminer/index.scss';\n"))),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Update ",(0,o.kt)("inlineCode",{parentName:"li"},"src/index.tsx")," styles file import.")),(0,o.kt)("p",null,"From"),(0,o.kt)("details",null,(0,o.kt)("summary",null,"See the code"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"import './index.css';\n"))),(0,o.kt)("p",null,"to"),(0,o.kt)("details",null,(0,o.kt)("summary",null,"See the code"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"import './index.scss';\n"))),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Rerun the application")),(0,o.kt)("p",null,(0,o.kt)("img",{src:t(4969).Z,width:"989",height:"1096"})),(0,o.kt)("p",null,"From now on you can generate the Forminer's code! Have fun!"),(0,o.kt)("h2",{id:"optional"},"Optional"),(0,o.kt)("h3",{id:"react-project-version-downgrade"},"React project version downgrade"),(0,o.kt)("p",null,"In this section we'll describe how to downgrade the React project version to the one supported by Forminer."),(0,o.kt)("h4",{id:"change-the-packages-versions-in-the-packagejson"},"Change the packages' versions in the ",(0,o.kt)("inlineCode",{parentName:"h4"},"package.json")),(0,o.kt)("p",null,"Proper versions of your ",(0,o.kt)("inlineCode",{parentName:"p"},"react")," packages should be:"),(0,o.kt)("details",null,(0,o.kt)("summary",null,"See the code"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'```json\n"@testing-library/react": "12.1.5",\n"@types/react": "17.0.2",\n"react": "17.0.2",\n"react-dom": "17.0.2",\n```\n'))),(0,o.kt)("p",null,"The dependencies' section should look as follows."),(0,o.kt)("details",null,(0,o.kt)("summary",null,"See the code"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'```json\n"dependencies": {\n    "@testing-library/jest-dom": "^5.16.5",\n    "@testing-library/react": "12.1.5",\n    "@testing-library/user-event": "^13.5.0",\n    "@types/jest": "^27.5.2",\n    "@types/node": "^16.11.68",\n    "@types/react": "17.0.2",\n    "@types/react-dom": "^18.0.6",\n    "react": "17.0.2",\n    "react-dom": "17.0.2",\n    "react-scripts": "5.0.1",\n    "typescript": "^4.8.4",\n    "web-vitals": "^2.1.4"\n},\n```\n'))),(0,o.kt)("h4",{id:"remove-package-lockjson-file-and-node_modules-directory"},"Remove ",(0,o.kt)("inlineCode",{parentName:"h4"},"package-lock.json")," file and ",(0,o.kt)("inlineCode",{parentName:"h4"},"node_modules")," directory"),(0,o.kt)("p",null,"Be careful and ",(0,o.kt)("strong",{parentName:"p"},"do not")," delete ",(0,o.kt)("code",null,"package.json")," file."),(0,o.kt)("h4",{id:"install-dependencies"},"Install dependencies"),(0,o.kt)("p",null,"To do so run the command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"npm i\n")),(0,o.kt)("h4",{id:"check-your-indextsx-file"},"Check your ",(0,o.kt)("inlineCode",{parentName:"h4"},"index.tsx")," file"),(0,o.kt)("p",null,"If your file has a code that uses ",(0,o.kt)("inlineCode",{parentName:"p"},"ReactDOM.createRoot")," and looks like this."),(0,o.kt)("details",null,(0,o.kt)("summary",null,"See the code"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"```tsx\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(\ndocument.getElementById('root') as HTMLElement,\n);\nroot.render(\n<React.StrictMode>\n    <App />\n</React.StrictMode>,\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n```\n"))),(0,o.kt)("p",null,"update it to look as follows"),(0,o.kt)("details",null,(0,o.kt)("summary",null,"See the code"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"```tsx\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nconst root = document.getElementById('root') as HTMLElement;\n\nReactDOM.render(\n<React.StrictMode>\n    <App />\n</React.StrictMode>,\nroot,\n);\n```\n"))),(0,o.kt)("h3",{id:"troubleshooting"},"Troubleshooting"),(0,o.kt)("p",null,"If you have problems running the application, please check the ",(0,o.kt)("a",{parentName:"p",href:"/docs/1.0.0/troubleshooting"},"Troubleshooting")," page."))}m.isMDXComponent=!0},7590:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/images/14549005-1d5749c93bc6a658c0cd928eb99adb2e.webp"},2131:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/images/14549017-ea44d18f803cfd76cb8bf558c34bb7ea.webp"},5737:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/images/14614537-02e871e5d0b8ff47fe88960753017770.webp"},9333:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/images/14614569-fb2d516a70aeb97be30f2fc9eba8c5b2.webp"},4969:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/images/14778407-925cb7b05b4b2ed759872fc2968fa90f.webp"},1724:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/images/14942211-bfb133eb40f97491443e55269d5bc98b.webp"}}]);