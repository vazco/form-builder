"use strict";(self.webpackChunkform_builder_documentation=self.webpackChunkform_builder_documentation||[]).push([[542],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>c});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),d=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},m=function(e){var t=d(e.components);return a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),p=d(n),c=i,f=p["".concat(s,".").concat(c)]||p[c]||u[c]||r;return n?a.createElement(f,o(o({ref:t},m),{},{components:n})):a.createElement(f,o({ref:t},m))}));function c(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=p;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var d=2;d<r;d++)o[d]=n[d];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},2850:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>l,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>m});var a=n(7462),i=(n(7294),n(3905));const r=n.p+"assets/medias/13139977-3d13d9373c2c6b3a569b2f70b44831e1.mov",o={description:"Learn how Form Builder's schema work"},l="Form Definition",s={unversionedId:"form-definition",id:"form-definition",title:"Form Definition",description:"Learn how Form Builder's schema work",source:"@site/docs/form-definition.mdx",sourceDirName:".",slug:"/form-definition",permalink:"/form-builder-documentation/form-definition",draft:!1,tags:[],version:"current",frontMatter:{description:"Learn how Form Builder's schema work"},sidebar:"docs",previous:{title:"Form Builder Documentation",permalink:"/form-builder-documentation/"},next:{title:"Supported technologies/stack",permalink:"/form-builder-documentation/supported-stack"}},d={},m=[{value:"Example form definition",id:"example-form-definition",level:2},{value:"Advanced usage",id:"advanced-usage",level:2}],u={toc:m};function p(e){let{components:t,...o}=e;return(0,i.kt)("wrapper",(0,a.Z)({},u,o,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"form-definition"},"Form Definition"),(0,i.kt)("p",null,"As you may have noticed, the FormBuilder form definition consists of three parts: ",(0,i.kt)("strong",{parentName:"p"},"layouts"),", ",(0,i.kt)("strong",{parentName:"p"},"schema"),", and ",(0,i.kt)("strong",{parentName:"p"},"views"),". On the contrary, a uniforms schema is only a single object, called ",(0,i.kt)("strong",{parentName:"p"},"bridge"),". It may be surprising because FormBuilder is based on uniforms. Let\u2019s look into them one by one:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Schema.")," This part contains the data definition, which is a list of fields. Each field has a name, data type, default value, error messages, and validation rules (e.g., minimum string length, numeric range). It\u2019s a custom format, heavily inspired by the JSON Schema."),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"To make it understandable for uniforms, it\u2019s being transformed into one, actually. Additionally, it\u2019s possible to subset it, creating a JSON Schema of a single page. Of course, all of this logic is aware of a FormBuilder-only feature: conditional rendering."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Views.")," This part defines the way a field is displayed. Most importantly, it defines which of the registered uniforms-compatible components will be used. Besides that, there are also field properties, like the label or placeholder. Lastly, there\u2019s the conditional rendering rule (if any).")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Layouts.")," This part is a list of form pages. Every page has a name and one ",(0,i.kt)("em",{parentName:"p"},"layout item"),". A layout item is one of the following:")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"A field"),", rendering a given view, as defined in ",(0,i.kt)("strong",{parentName:"p"},"views"),".")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"A widget"),", rendering a read-only component, e.g., some text or an image.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"A container"),", rendering some wrapper (carousel, list, table, etc.) and its inner layout item(s). That\u2019s the power of FormBuilder \u2013 you can freely nest containers without extra logic. However, it makes the form definition recursive, making it not necessarily easy to store in a non-recursive fashion. We got you covered \u2013 there\u2019s a pair of helper functions that (de)linearize the form definition into a non-recursive structure."))),(0,i.kt)("h2",{id:"example-form-definition"},"Example form definition"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},'{\n  "schema": [\n    // Every field has an unique `fieldId` provided by the FormBuilder.\n    { "fieldId": "1", "name": "name", "type": "string", "required": true },\n    { "fieldId": "2", "name": "variantA", "type": "number", "required": true },\n    { "fieldId": "3", "name": "variantB", "type": "number", "required": true }\n  ],\n  "views": [\n    // Every view has an unique `viewId` provided by the FormBuilder.\n    { "component": "TextField", "fieldId": "1", "label": "Name", "viewId": "1" },\n    { "component": "AutoField", "fieldId": "2", "label": "Variant A", "viewId": "2" },\n    { "component": "NumField", "fieldId": "3", "label": "Variant B", "viewId": "3" }\n  ],\n  "layouts": [\n    {\n      "name": "Page 1",\n      // A page isby default rendered using a vertical list.\n      "layout": {\n        "kind": "Container",\n        "type": "List",\n        "config": { "variant": "vertical" },\n        // Every layout node has an unique `layoutId` provided by the FormBuilder.\n        "layoutId": "1",\n        "children": [\n          { "kind": "Field", "viewId": "1", "layoutId": "2" },\n          { "kind": "Widget", "type": "Image", "config": { "imageUrl": "https://picsum.photos/500", "alt": "Random image", "width": 250, "height": 250 }, "layoutId": "3" },\n          {\n            "kind": "Container",\n            "config": { "variant": "horizontal" },\n            "type": "List",\n            "layoutId": "4",\n            "children": [\n              { "kind": "Field", "viewId": "2", "layoutId": "5" },\n              { "kind": "Field", "viewId": "3", "layoutId": "6" }\n            ]\n          }\n        ]\n      }\n    }\n  ]\n}\n')),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"A form rendered using the above form definition",src:n(3692).Z,width:"520",height:"464"})),(0,i.kt)("h2",{id:"advanced-usage"},"Advanced usage"),(0,i.kt)("p",null,"Now, there\u2019s a twist! The FormBuilder UI allows you to build any form you\u2019d like, but the form definition allows you to do two more things:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Every field can have multiple views.")," The field\u2019s value is shared between the views, but you can use different components for each of them. A good example is an address input and a map \u2013 instead of building it within one component, you could have two independent ones.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Every view can be used multiple times in the layouts.")," Similarly, you can render the same view multiple times. A good example is to give the user an option to review the values before sending them by displaying the same view the second time on the last page."))),(0,i.kt)("p",null,"Neither of these features is available in the UI, but you can leverage them while manipulating the form definition programmatically. It can be used to automatically enrich the forms that the users built."),(0,i.kt)("p",null,"Here\u2019s an example schema leveraging these two features:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},'{\n  "views": [\n    // Note that these two views have the same `fieldId`.\n    { "component": "AutoField", "fieldId": "1", "label": "First name (a)", "viewId": "1" },\n    { "component": "AutoField", "fieldId": "1", "label": "First name (b)", "viewId": "2" },\n    { "component": "AutoField", "fieldId": "2", "label": "Last name", "viewId": "3" }\n  ],\n  "layouts": [\n    {\n      "name": "Page 1",\n      "layout": {\n        "kind": "Container",\n        "type": "List",\n        "config": { "variant": "vertical" },\n        "layoutId": "1",\n        "children": [\n          { "kind": "Field", "viewId": "1", "layoutId": "2" },\n          { "kind": "Field", "viewId": "2", "layoutId": "3" },\n          // Note that these two layout nodes have the same `viewId`.\n          { "kind": "Field", "viewId": "3", "layoutId": "4" },\n          { "kind": "Field", "viewId": "3", "layoutId": "5" }\n        ]\n      }\n    }\n  ],\n  "schema": [\n    { "fieldId": "1", "name": "firstName", "type": "string" },\n    { "fieldId": "2", "name": "lastName", "type": "string" }\n  ]\n}\n')),(0,i.kt)("div",{className:"row"},(0,i.kt)("div",{className:"col col--8"},(0,i.kt)("p",null,"On the right, you can see the form rendered using the above schema."),(0,i.kt)("p",null,"As you can see, the layout node that refer to the same view (bottom two) are rendered identically and their values\nare synced."),(0,i.kt)("p",null,"The top two values have different views a(and different labels in this example), but as they refer to the same\nfield, their value is also synced.")),(0,i.kt)("div",{className:"col col--4"},(0,i.kt)("video",{controls:!0},(0,i.kt)("source",{src:r})))))}p.isMDXComponent=!0},3692:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/13598723-a9a5d4aa544d496ea1a4f40ba5dec23d.png"}}]);