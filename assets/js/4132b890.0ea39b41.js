"use strict";(self.webpackChunkform_builder_documentation=self.webpackChunkform_builder_documentation||[]).push([[394],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var o=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,i=function(e,t){if(null==e)return{};var n,o,i={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=o.createContext({}),p=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},d=function(e){var t=p(e.components);return o.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},u=o.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),u=p(n),m=i,f=u["".concat(l,".").concat(m)]||u[m]||c[m]||r;return n?o.createElement(f,a(a({ref:t},d),{},{components:n})):o.createElement(f,a({ref:t},d))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,a=new Array(r);a[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:i,a[1]=s;for(var p=2;p<r;p++)a[p]=n[p];return o.createElement.apply(null,a)}return o.createElement.apply(null,n)}u.displayName="MDXCreateElement"},7447:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>p,default:()=>f,frontMatter:()=>l,metadata:()=>d,toc:()=>u});var o=n(7462),i=(n(7294),n(3905));const r=n.p+"assets/medias/15564803-a660abbbc540ea7668845c2e5dbc0c33.mov",a=n.p+"assets/medias/15237133-de6eb2df623adce76739373cf579490e.mov",s=n.p+"assets/medias/15138835-9dd23a430be3c83cc22fef1fb19043f8.mov",l={description:"How FormBuilder can works with lists"},p="Handling lists",d={unversionedId:"handling-lists",id:"handling-lists",title:"Handling lists",description:"How FormBuilder can works with lists",source:"@site/docs/handling-lists.mdx",sourceDirName:".",slug:"/handling-lists",permalink:"/form-builder-documentation/handling-lists",draft:!1,tags:[],version:"current",frontMatter:{description:"How FormBuilder can works with lists"},sidebar:"docs",previous:{title:"Handling custom components",permalink:"/form-builder-documentation/custom-components"},next:{title:"Translations (i18n)",permalink:"/form-builder-documentation/translations"}},c={},u=[{value:"List of inputs",id:"list-of-inputs",level:2},{value:"Dropdown with multiple values",id:"dropdown-with-multiple-values",level:2},{value:"Other variants",id:"other-variants",level:2}],m={toc:u};function f(e){let{components:t,...l}=e;return(0,i.kt)("wrapper",(0,o.Z)({},m,l,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"handling-lists"},"Handling lists"),(0,i.kt)("p",null,"FormBuilder does not handle lists (array data type) out-of-the-box, but it's possible to work around it. In this guide we'll look into a couple of common form patterns."),(0,i.kt)("h2",{id:"list-of-inputs"},"List of inputs"),(0,i.kt)("p",null,"The most basic list would be a list of inputs. It looks as follows:"),(0,i.kt)("video",{controls:!0},(0,i.kt)("source",{src:r})),(0,i.kt)("p",null,"To make it usable, we have to patch the ",(0,i.kt)("inlineCode",{parentName:"p"},"makeBridge")," function that builds the final form's JSON schema definition out of the FormBuilder's form definition. The change is fairly small:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-diff"}," // Actually register the field.\n-jsonSchema.properties[name] = definition;\n+if (view?.props?.isMulti) {\n+  jsonSchema.properties[name] = { type: 'array', items: definition };\n+} else {\n+  jsonSchema.properties[name] = definition;\n+}\n")),(0,i.kt)("p",null,"Now all we have to do is to set the ",(0,i.kt)("inlineCode",{parentName:"p"},"isMulti")," custom property on any of the inputs:"),(0,i.kt)("p",null,(0,i.kt)("img",{src:n(8571).Z,width:"287",height:"154"})),(0,i.kt)("h2",{id:"dropdown-with-multiple-values"},"Dropdown with multiple values"),(0,i.kt)("p",null,"Another popular list input is a dropdown with multiple values. Normally, a dropdown allows us to select only a single value. If we'd add a standard FormBuilder's dropdown and apply the \"List of inputs\" workaround, we'd get the following result:"),(0,i.kt)("video",{controls:!0},(0,i.kt)("source",{src:a})),(0,i.kt)("p",null,"While perfectly suitable for some cases, it doesn't make sense for others. Instead, we'd like to have a dropdown that allows selecting multiple values. All of the uniforms themes do handle it, but it has to be configured. To make it work, we'll adjust the ",(0,i.kt)("inlineCode",{parentName:"p"},"makeBridge")," helper similarly:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-diff"},"// Actually register the field.\n-jsonSchema.properties[name] = definition;\n+if (view?.props?.isMulti) {\n+  jsonSchema.properties[name] = { type: 'array', items: definition };\n+  if (definition.enum) {\n+    jsonSchema.properties[name].default = [];\n+    jsonSchema.properties[name].uniforms = { allowedValues: definition.enum };\n+    delete definition.enum;\n+  }\n+} else {\n+  jsonSchema.properties[name] = definition;\n+}\n")),(0,i.kt)("p",null,"Now we need to select the ",(0,i.kt)("inlineCode",{parentName:"p"},"SelectField")," component as well as set the ",(0,i.kt)("inlineCode",{parentName:"p"},"isMulti: true")," custom property:"),(0,i.kt)("p",null,(0,i.kt)("img",{src:n(7187).Z,width:"286",height:"541"})),(0,i.kt)("video",{controls:!0},(0,i.kt)("source",{src:s})),(0,i.kt)("h2",{id:"other-variants"},"Other variants"),(0,i.kt)("p",null,"There's a lot of other possibilities to handle list inputs and we can't cover all of them in this guide. All of them have to consist of two parts: making sure that the JSON schema correctly validates our list, and the component renders it as we'd like. The former can be based on the examples above. The latter requires custom components (see ",(0,i.kt)("a",{parentName:"p",href:"custom-components"},"Handling custom components")," for details)."))}f.isMDXComponent=!0},8571:(e,t,n)=>{n.d(t,{Z:()=>o});const o=n.p+"assets/images/15335427-163e7cfcd957b12afd7175e0a2941df3.png"},7187:(e,t,n)=>{n.d(t,{Z:()=>o});const o=n.p+"assets/images/15400974-f618baae6f98250ee7a415765e69fb7e.png"}}]);