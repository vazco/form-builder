import ExpansionPanel from '@material-ui/core/ExpansionPanel';
import ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';
import ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';
import React, { useState } from 'react';

import { AccentHeading } from '../../components/AccentHeading';
import { Container } from '../../components/Container';
import { List, ListItem } from '../../components/List';
import { SectionLayout } from '../../components/SectionLayout';
import PlusIcon from '../../images/svg/add-black.svg';

const items = [
  {
    question: 'What is Forminer?',
    answer:
      'It’s a WYSIWYG React form builder. It allows you to build single- and multi-page forms, add custom validation, and configure conditional rendering. To put it in another way, It’s a ready-to-use set of React components for your project to have a fully functional Forminer in minutes.',
  },
  {
    question: 'How is Forminer different from Formium, TypeForm, or JotForm?',
    answer: [
      {
        content:
          'Forminer is a set of React components, and TypeForm/JotForm are SaaS products. The primary difference between these is that the Forminer becomes a part of your project and you integrate it directly in the code, while the others are external applications.',
        list: [
          'That implies you decide what you do with the data gathered with Forminer, while the others store it on their systems and give you options to access it.',
        ],
      },
      {
        content:
          'Formium is also a set of React components for rendering the built forms, but to build them, you have to interact with their SaaS backend. That’s where you create the forms and store the gathered data (by default). Forminer is distributed in its entirety as source code, including both the rendering of built forms and the Forminer itself.',
        list: [
          'The difference is that the Forminer definition (how the form looks like) is part of your app, can be adjusted, extended, and even generated by your app.',
          'Also, because there’s no backend Forminer contacts, it can also work offline (if your app supports that).',
        ],
      },
    ],
  },
  {
    question: 'Is Forminer Open Source?',
    answer:
      'No, Forminer is not open source. However, its core – uniforms – is a set of 100% open source (MIT licensed) packages, hosted on GitHub.',
  },
  {
    question: 'Is Forminer compatible with technologies other than React?',
    answer:
      'Forminer requires React to work, but you can embed it in your application even if it’s not there yet (e.g., it’s an Angular- or Vue-based app).',
  },
];

export const FAQSection = () => {
  const [expanded, setExpanded] = useState('');

  const handleChange = panel => (event, newExpanded) => {
    setExpanded(newExpanded ? panel : '');
  };

  return (
    <SectionLayout alternativeBackground>
      <Container className="faq__container">
        <AccentHeading marginBottom={70} level={2} size="lg" center isStrong>
          Frequently asked questions
        </AccentHeading>
        <div className="faq__questions__max-width ">
          {items.map(({ question, answer }, index) => {
            const isExpanded = expanded === `panel${index}`;
            return (
              <ExpansionPanel
                key={question}
                expanded={isExpanded}
                onChange={handleChange(`panel${index}`)}
                className="faq__question-and-answer"
                square
              >
                <ExpansionPanelSummary
                  className="faq__question-and-answer__question"
                  aria-controls={`panel${index}d-content`}
                >
                  <p className="faq__question">{question}</p>
                  <PlusIcon
                    className="faq__question-and-answer__question__plus-icon"
                    style={{
                      transform: isExpanded ? 'rotate(-225deg)' : 'none',
                    }}
                  />
                </ExpansionPanelSummary>
                <ExpansionPanelDetails className="faq__question-and-answer__answer">
                  {Array.isArray(answer) ? (
                    <List>
                      {answer.map(({ content, list }) => (
                        <ListItem key={content}>
                          {content}
                          {Array.isArray(list) && (
                            <List>
                              {list.map(text => (
                                <ListItem key={text}>{text}</ListItem>
                              ))}
                            </List>
                          )}
                        </ListItem>
                      ))}
                    </List>
                  ) : (
                    <p>{answer}</p>
                  )}
                </ExpansionPanelDetails>
              </ExpansionPanel>
            );
          })}
        </div>
      </Container>
    </SectionLayout>
  );
};
